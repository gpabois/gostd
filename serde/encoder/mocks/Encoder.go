// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	result "github.com/gpabois/gostd/result"
	mock "github.com/stretchr/testify/mock"
)

// Encoder is an autogenerated mock type for the Encoder type
type Encoder struct {
	mock.Mock
}

type Encoder_Expecter struct {
	mock *mock.Mock
}

func (_m *Encoder) EXPECT() *Encoder_Expecter {
	return &Encoder_Expecter{mock: &_m.Mock}
}

// EncodeBool provides a mock function with given fields: value
func (_m *Encoder) EncodeBool(value bool) result.Result[bool] {
	ret := _m.Called(value)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(bool) result.Result[bool]); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_EncodeBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeBool'
type Encoder_EncodeBool_Call struct {
	*mock.Call
}

// EncodeBool is a helper method to define mock.On call
//   - value bool
func (_e *Encoder_Expecter) EncodeBool(value interface{}) *Encoder_EncodeBool_Call {
	return &Encoder_EncodeBool_Call{Call: _e.mock.On("EncodeBool", value)}
}

func (_c *Encoder_EncodeBool_Call) Run(run func(value bool)) *Encoder_EncodeBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *Encoder_EncodeBool_Call) Return(_a0 result.Result[bool]) *Encoder_EncodeBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_EncodeBool_Call) RunAndReturn(run func(bool) result.Result[bool]) *Encoder_EncodeBool_Call {
	_c.Call.Return(run)
	return _c
}

// EncodeFloat64 provides a mock function with given fields: value
func (_m *Encoder) EncodeFloat64(value float64) result.Result[bool] {
	ret := _m.Called(value)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(float64) result.Result[bool]); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_EncodeFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeFloat64'
type Encoder_EncodeFloat64_Call struct {
	*mock.Call
}

// EncodeFloat64 is a helper method to define mock.On call
//   - value float64
func (_e *Encoder_Expecter) EncodeFloat64(value interface{}) *Encoder_EncodeFloat64_Call {
	return &Encoder_EncodeFloat64_Call{Call: _e.mock.On("EncodeFloat64", value)}
}

func (_c *Encoder_EncodeFloat64_Call) Run(run func(value float64)) *Encoder_EncodeFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *Encoder_EncodeFloat64_Call) Return(_a0 result.Result[bool]) *Encoder_EncodeFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_EncodeFloat64_Call) RunAndReturn(run func(float64) result.Result[bool]) *Encoder_EncodeFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// EncodeInt64 provides a mock function with given fields: value
func (_m *Encoder) EncodeInt64(value int64) result.Result[bool] {
	ret := _m.Called(value)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(int64) result.Result[bool]); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_EncodeInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeInt64'
type Encoder_EncodeInt64_Call struct {
	*mock.Call
}

// EncodeInt64 is a helper method to define mock.On call
//   - value int64
func (_e *Encoder_Expecter) EncodeInt64(value interface{}) *Encoder_EncodeInt64_Call {
	return &Encoder_EncodeInt64_Call{Call: _e.mock.On("EncodeInt64", value)}
}

func (_c *Encoder_EncodeInt64_Call) Run(run func(value int64)) *Encoder_EncodeInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Encoder_EncodeInt64_Call) Return(_a0 result.Result[bool]) *Encoder_EncodeInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_EncodeInt64_Call) RunAndReturn(run func(int64) result.Result[bool]) *Encoder_EncodeInt64_Call {
	_c.Call.Return(run)
	return _c
}

// EncodeString provides a mock function with given fields: value
func (_m *Encoder) EncodeString(value string) result.Result[bool] {
	ret := _m.Called(value)

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func(string) result.Result[bool]); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_EncodeString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodeString'
type Encoder_EncodeString_Call struct {
	*mock.Call
}

// EncodeString is a helper method to define mock.On call
//   - value string
func (_e *Encoder_Expecter) EncodeString(value interface{}) *Encoder_EncodeString_Call {
	return &Encoder_EncodeString_Call{Call: _e.mock.On("EncodeString", value)}
}

func (_c *Encoder_EncodeString_Call) Run(run func(value string)) *Encoder_EncodeString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Encoder_EncodeString_Call) Return(_a0 result.Result[bool]) *Encoder_EncodeString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_EncodeString_Call) RunAndReturn(run func(string) result.Result[bool]) *Encoder_EncodeString_Call {
	_c.Call.Return(run)
	return _c
}

// Pop provides a mock function with given fields:
func (_m *Encoder) Pop() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type Encoder_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
func (_e *Encoder_Expecter) Pop() *Encoder_Pop_Call {
	return &Encoder_Pop_Call{Call: _e.mock.On("Pop")}
}

func (_c *Encoder_Pop_Call) Run(run func()) *Encoder_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Encoder_Pop_Call) Return(_a0 result.Result[bool]) *Encoder_Pop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_Pop_Call) RunAndReturn(run func() result.Result[bool]) *Encoder_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// PushArray provides a mock function with given fields:
func (_m *Encoder) PushArray() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_PushArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushArray'
type Encoder_PushArray_Call struct {
	*mock.Call
}

// PushArray is a helper method to define mock.On call
func (_e *Encoder_Expecter) PushArray() *Encoder_PushArray_Call {
	return &Encoder_PushArray_Call{Call: _e.mock.On("PushArray")}
}

func (_c *Encoder_PushArray_Call) Run(run func()) *Encoder_PushArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Encoder_PushArray_Call) Return(_a0 result.Result[bool]) *Encoder_PushArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_PushArray_Call) RunAndReturn(run func() result.Result[bool]) *Encoder_PushArray_Call {
	_c.Call.Return(run)
	return _c
}

// PushArrayValue provides a mock function with given fields:
func (_m *Encoder) PushArrayValue() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_PushArrayValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushArrayValue'
type Encoder_PushArrayValue_Call struct {
	*mock.Call
}

// PushArrayValue is a helper method to define mock.On call
func (_e *Encoder_Expecter) PushArrayValue() *Encoder_PushArrayValue_Call {
	return &Encoder_PushArrayValue_Call{Call: _e.mock.On("PushArrayValue")}
}

func (_c *Encoder_PushArrayValue_Call) Run(run func()) *Encoder_PushArrayValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Encoder_PushArrayValue_Call) Return(_a0 result.Result[bool]) *Encoder_PushArrayValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_PushArrayValue_Call) RunAndReturn(run func() result.Result[bool]) *Encoder_PushArrayValue_Call {
	_c.Call.Return(run)
	return _c
}

// PushMap provides a mock function with given fields:
func (_m *Encoder) PushMap() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_PushMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushMap'
type Encoder_PushMap_Call struct {
	*mock.Call
}

// PushMap is a helper method to define mock.On call
func (_e *Encoder_Expecter) PushMap() *Encoder_PushMap_Call {
	return &Encoder_PushMap_Call{Call: _e.mock.On("PushMap")}
}

func (_c *Encoder_PushMap_Call) Run(run func()) *Encoder_PushMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Encoder_PushMap_Call) Return(_a0 result.Result[bool]) *Encoder_PushMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_PushMap_Call) RunAndReturn(run func() result.Result[bool]) *Encoder_PushMap_Call {
	_c.Call.Return(run)
	return _c
}

// PushMapKey provides a mock function with given fields:
func (_m *Encoder) PushMapKey() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_PushMapKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushMapKey'
type Encoder_PushMapKey_Call struct {
	*mock.Call
}

// PushMapKey is a helper method to define mock.On call
func (_e *Encoder_Expecter) PushMapKey() *Encoder_PushMapKey_Call {
	return &Encoder_PushMapKey_Call{Call: _e.mock.On("PushMapKey")}
}

func (_c *Encoder_PushMapKey_Call) Run(run func()) *Encoder_PushMapKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Encoder_PushMapKey_Call) Return(_a0 result.Result[bool]) *Encoder_PushMapKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_PushMapKey_Call) RunAndReturn(run func() result.Result[bool]) *Encoder_PushMapKey_Call {
	_c.Call.Return(run)
	return _c
}

// PushMapValue provides a mock function with given fields:
func (_m *Encoder) PushMapValue() result.Result[bool] {
	ret := _m.Called()

	var r0 result.Result[bool]
	if rf, ok := ret.Get(0).(func() result.Result[bool]); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(result.Result[bool])
	}

	return r0
}

// Encoder_PushMapValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushMapValue'
type Encoder_PushMapValue_Call struct {
	*mock.Call
}

// PushMapValue is a helper method to define mock.On call
func (_e *Encoder_Expecter) PushMapValue() *Encoder_PushMapValue_Call {
	return &Encoder_PushMapValue_Call{Call: _e.mock.On("PushMapValue")}
}

func (_c *Encoder_PushMapValue_Call) Run(run func()) *Encoder_PushMapValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Encoder_PushMapValue_Call) Return(_a0 result.Result[bool]) *Encoder_PushMapValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encoder_PushMapValue_Call) RunAndReturn(run func() result.Result[bool]) *Encoder_PushMapValue_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEncoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewEncoder creates a new instance of Encoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEncoder(t mockConstructorTestingTNewEncoder) *Encoder {
	mock := &Encoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
