// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Element is an autogenerated mock type for the Element type
type Element struct {
	mock.Mock
}

type Element_Expecter struct {
	mock *mock.Mock
}

func (_m *Element) EXPECT() *Element_Expecter {
	return &Element_Expecter{mock: &_m.Mock}
}

// Key provides a mock function with given fields:
func (_m *Element) Key() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Element_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Element_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *Element_Expecter) Key() *Element_Key_Call {
	return &Element_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *Element_Key_Call) Run(run func()) *Element_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Element_Key_Call) Return(_a0 string) *Element_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Element_Key_Call) RunAndReturn(run func() string) *Element_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *Element) Value() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Element_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Element_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *Element_Expecter) Value() *Element_Value_Call {
	return &Element_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *Element_Value_Call) Run(run func()) *Element_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Element_Value_Call) Return(_a0 interface{}) *Element_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Element_Value_Call) RunAndReturn(run func() interface{}) *Element_Value_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewElement interface {
	mock.TestingT
	Cleanup(func())
}

// NewElement creates a new instance of Element. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElement(t mockConstructorTestingTNewElement) *Element {
	mock := &Element{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
